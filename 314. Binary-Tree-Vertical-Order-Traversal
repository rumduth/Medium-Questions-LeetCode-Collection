from typing import (
    List,
)
from lintcode import (
    TreeNode,
)
from collections import defaultdict, deque

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of tree
    @return: the vertical order traversal
    """
    def vertical_order(self, root: TreeNode) -> List[List[int]]:
        # write your code here
        if root is None:
            return []
        cache = defaultdict(list)
        queue = deque([[root,0]])
        minPos = 0
        maxPos = 0
        while queue:
            n = len(queue)
            for i in range(n):
                node, pos = queue.popleft()
                cache[pos].append(node.val)
                if node.left:
                    queue.append([node.left,pos-1])
                if node.right:
                    queue.append([node.right,pos+1])
                minPos = min(minPos,pos)
                maxPos = max(maxPos,pos)
        
        res = []
        for key in range(minPos,maxPos + 1):
            res.append(cache[key])
        return res

