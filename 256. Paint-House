from typing import (
    List,
)

class Solution:
    """
    @param costs: n x 3 cost matrix
    @return: An integer, the minimum cost to paint all houses
    """
    def min_cost(self, costs: List[List[int]]) -> int:
        # write your code here
        n = len(costs)
        if n == 0:
            return 0
        dp = [[0 for _ in range(3)] for _ in range(n)]
        dp[0] = costs[0]
        for i in range(1, n):
            for j in range(3):
                if j == 0:
                    dp[i][j] = min(dp[i-1][j+1],dp[i-1][j+2]) + costs[i][j]
                elif j == 1:
                    dp[i][j] = min(dp[i-1][j-1],dp[i-1][j+1]) + costs[i][j]
                else:
                    dp[i][j] = costs[i][j] + min(dp[i-1][j-1],dp[i-1][j-2])
        
        res = dp[n-1][0]
        for col in range(1,3):
            res = min(res,dp[n-1][col])
        return res


from typing import (
    List,
)

class Solution:
    """
    @param costs: n x 3 cost matrix
    @return: An integer, the minimum cost to paint all houses
    """
    def min_cost(self, costs: List[List[int]]) -> int:
        # write your code here
        red, blue, green = 0, 0, 0
        for cost_red, cost_blue, cost_green in costs:
            new_red = cost_red + min(blue,green)
            new_blue = cost_blue + min(red,green)
            new_green = cost_green + min(red,blue)
            red, blue, green = new_red, new_blue, new_green
        return min(red,blue,green)
