from typing import (
    List,
)

class UnionFind:
    def __init__(self,n):
        self.parents = [i for i in range(n)]
    def find(self, x):
        if self.parents[x] != x:
            self.parents[x] = self.find(self.parents[x])
        return self.parents[x]
    def union(self,x,y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            self.parents[root_y] = root_x
            return False
        return True
        
        

class Solution:
    """
    @param n: the number of vertices
    @param edges: the edges of undirected graph
    @return: the number of connected components
    """
    def count_components(self, n: int, edges: List[List[int]]) -> int:
        # write your code here
        uf = UnionFind(n)
        for u, v in edges:
            uf.union(u,v)
        components = set()
        for i in range(n):
            group = uf.find(i)
            if not group in components:
                components.add(group)
        
        return len(components)



