class Solution {
public:
    int superPow(int a, vector<int>& b) {
        if(a == 1) return 1;
        long long res = 1;
        const int MOD = 1337;
        auto quick_pow = [&](long long base, int exponent) -> int{
            long long res = 1;
            while(exponent > 0){
                if(exponent & 1)
                    res = (res * base) % MOD;
                base = (base * base) % MOD;
                exponent >>= 1;
            }
            return static_cast<int>(res);
        };

        for(int i = b.size() - 1; i >= 0; i--){
            res = res * quick_pow(a,b[i]) % MOD;
            a = quick_pow(a,10) % MOD;
        
        }
        return static_cast<int>(res);
    }
};



class Solution {
public:
    int superPow(int a, vector<int>& b) {
        if(a == 1) return 1;
        long long res = 1;
        const int MOD = 1337;
        auto quick_pow = [&](long long base, int exponent) -> int{
            long long res = 1;
            while(exponent > 0){
                if(exponent & 1)
                    res = (res * base) % MOD;
                base = (base * base) % MOD;
                exponent >>= 1;
            }
            return static_cast<int>(res);
        };

        for(int i = 0; i < b.size(); i++){
            res = quick_pow(res,10) * quick_pow(a,b[i]) % MOD;
        }
        return static_cast<int>(res);
    }
};
