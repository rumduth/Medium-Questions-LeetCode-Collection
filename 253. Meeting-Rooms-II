In order to do Meeting Rooms II problem, I will do Meeting Room I first

from typing import (
    List,
)
from lintcode import (
    Interval,
)

"""
Definition of Interval:
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: if a person could attend all meetings
    """
    def can_attend_meetings(self, intervals: List[Interval]) -> bool:
        # Write your code here
        intervals.sort(key=lambda x : x.start)
        for i in range(1,len(intervals)):
            if intervals[i].start < intervals[i-1].end:
                return False;
        return True



from typing import (
    List,
)
from lintcode import (
    Interval,
)

import heapq
"""
Definition of Interval:
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: the minimum number of conference rooms required
    """
    def min_meeting_rooms(self, intervals: List[Interval]) -> int:
        # Write your code here
        min_heap = []
        res = 0
        intervals.sort(key= lambda x : x.start)
        for i in range(len(intervals)):
            if min_heap is None:
                heapq.heappush(min_heap,intervals[i].end)
            else:
                while min_heap and min_heap[0] <= intervals[i].start:
                    heapq.heappop(min_heap)
                heapq.heappush(min_heap,intervals[i].end)
                
            res = max(res,len(min_heap))

        return res

