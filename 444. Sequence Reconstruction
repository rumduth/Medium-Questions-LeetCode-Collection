from typing import (
    List,
)
from collections import deque, defaultdict

class Solution:
    """
    @param org: a permutation of the integers from 1 to n
    @param seqs: a list of sequences
    @return: true if it can be reconstructed only one or false
    """
    def sequence_reconstruction(self, org: List[int], seqs: List[List[int]]) -> bool:
        # write your code here
        i = 0
        graph = defaultdict(set)
        in_degree = defaultdict(int)
        for seq in seqs:
            if len(seq) == 1:
                graph[seq[0]] = set()
            for j in range(1,len(seq)):
                u, v = seq[j-1], seq[j]
                if v not in graph[u]:
                    graph[u].add(v)
                    in_degree[v] += 1 
        
        queue = deque([])
        for node in org:
            if in_degree[node] == 0 and node in graph:
                queue.append(node)
       
        while len(queue) == 1:
            node = queue.popleft()
            if node != org[i]:
                return False;
            i += 1
            for neighbor in graph[node]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    queue.append(neighbor)
        return i == len(org)


