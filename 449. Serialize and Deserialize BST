# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    


    def serialize(self, root: Optional[TreeNode]) -> str:
        """Encodes a tree to a single string.
        """
        res = []
        if root is None:
            res.append('#')
        def dfs(root):
            if root is None:
                res.append('#')
                return
            res.append(str(root.val))
            dfs(root.left)
            dfs(root.right)
        
        dfs(root)
        return '-'.join(res)
            
        

    def deserialize(self, data: str) -> Optional[TreeNode]:
        """Decodes your encoded data to tree.
        """
        if data == '#':
            return None
        nodes = data.split("-")
        i = 0
        def dfs():
            nonlocal i
            if nodes[i] == '#':
                i += 1
                return None
            root = TreeNode(int(nodes[i]))
            i += 1
            root.left = dfs()
            root.right = dfs()
            return root
        
        return dfs()
        
        
        

# Your Codec object will be instantiated and called as such:
# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# tree = ser.serialize(root)
# ans = deser.deserialize(tree)
# return ans
