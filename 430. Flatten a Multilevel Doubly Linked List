"""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution:
    def flatten(self, head: 'Optional[Node]') -> 'Optional[Node]':
       
        def helper(root):
            if root is None:
                return [None,None]
            if not root.child and not root.next:
                return [root, root]
            
            if not root.child:
                return [root, helper(root.next)[1]]
            
            if not root.next:
                root.next = root.child
                root.child = None
                root.next.prev = root
                return [root, helper(root.next)[1]]
                

            nextHead, nextTail = helper(root.next)
            childHead, childTail = helper(root.child)

            root.next = childHead
            childHead.prev = root
            
            childTail.next = nextHead
            nextHead.prev = childTail

            root.child = None

            return [root,nextTail]
        root, _ = helper(head)

        return root
