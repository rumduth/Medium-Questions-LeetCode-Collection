class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        adjacent_list = defaultdict(list)
        n = len(equations)
        for i in range(n):
            u, v = equations[i]
            cost = values[i]
            adjacent_list[u].append((v,cost))
            adjacent_list[v].append((u,1/cost))
        
        cache = {}
        def dfs(u, v, visited):
            if u == v:
                return 1
            if (u,v) in cache:
                return cache[(u,v)]
            visited.add(u)
            for neighbor, cost in adjacent_list[u]:
                if neighbor not in visited:
                    calculation = dfs(neighbor, v, visited)
                    if calculation != -1:
                        cache[(u,v)] = cost * calculation
                        return cost * calculation
            return -1



        res = [-1] * len(queries)
        for i, (u, v) in enumerate(queries):
            print(i, cache)
            if not u in adjacent_list or not v in adjacent_list:
                continue
            if u == v:
                res[i] = 1.00
                continue
            visited = set()
            res[i] = dfs(u,v,visited)

        return res



class UnionFind:
    def __init__(self):
        self.parents = {}
        self.relativeValues = {}
    
    def find(self, x):
        if x not in self.parents:
            self.parents[x] = x
            self.relativeValues[x] = 1.00
            return x
        
        if x != self.parents[x]:
            p = self.parents[x]
            self.parents[x] = self.find(p)
            self.relativeValues[x] *= self.relativeValues[p]

        return self.parents[x]


    def union(self, x, y, v):
        root_x, root_y = self.find(x), self.find(y)
        if root_x != root_y:
            self.parents[root_y] = root_x
            self.relativeValues[root_y] = self.relativeValues[x] / (self.relativeValues[y] * v)
    
    def divide(self,x,y):
        if x not in self.parents or y not in self.parents:
            return -1.00
        x_root, y_root = self.find(x), self.find(y)
        if x_root != y_root:
            return -1.00
        return self.relativeValues[x] / self.relativeValues[y]

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        uf = UnionFind()
        for (u,v), val in zip(equations, values):
            uf.union(u,v,val)
        
        return [uf.divide(x,y) for x, y in queries]




