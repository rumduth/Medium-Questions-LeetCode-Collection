class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        def cacl(n):
            return n * (n + 1) / 2 - n - (n-1)
        n = len(nums)
        res = 0
        diff = [0] * (n-1)
        for i in range(n-1):
            diff[i] = nums[i+1] - nums[i]
        cnt = 1
        for i in range(1, n-1):
            if diff[i] == diff[i-1]:
                cnt += 1
            else:
                if cnt >= 2:
                    res += cacl(cnt + 1)
                cnt = 1
        if cnt >= 2:
            res += cacl(cnt + 1)
        return int(res)    


class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        def cacl(n):
            return n * (n + 1) / 2 - n - (n-1)
        n = len(nums)
        res = 0
        cnt = 0
        for i in range(2, n):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                if cnt == 0:
                    cnt = 3
                else:
                    cnt += 1
            else:
                if cnt >= 3:
                    res += cacl(cnt)
                cnt = 0
        if cnt >= 3:
            res += cacl(cnt )
        return int(res)    

class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [0] * n
        for i in range(2,n):
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2]:
                dp[i] = dp[i-1] + 1
        return sum(dp)
