class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        m = len(board)
        n = len(board[0])
        directions = [0,1,0,-1,0]
        res = 0 
        def dfs(r, c):
            if r < 0 or r >= m or c < 0 or c >= n:
                return
            if board[r][c] == '.':
                return
            board[r][c] = '.'
            for i in range(4):
                dfs(r + directions[i], c + directions[i+1])
        
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'X':
                    res += 1
                    dfs(i,j)
        return res


class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        res = 0
        m = len(board)
        n = len(board[0])
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'X':
                    if i == 0 and j == 0:
                        res += 1
                    elif i == 0:
                        if board[i][j-1] != 'X':
                            res += 1
                    elif j == 0:
                        if board[i-1][j] != 'X':
                            res += 1
                    elif board[i-1][j] != 'X' and board[i][j-1] != 'X':
                        res += 1
        return res


class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        res = 0
        m = len(board)
        n = len(board[0])
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'X':
                    if ((i == 0 or board[i-1][j] == '.') and (j == 0 or board[i][j-1] == '.')):
                        res += 1
        return res
