class Twitter:

    def __init__(self):
        self.tweets = defaultdict()
        self.time = 0
        self.user_followers = defaultdict(set)
        self.user_tweets = defaultdict(list)
        

    def postTweet(self, userId: int, tweetId: int) -> None:
        self.user_tweets[userId].append(tweetId)
        self.tweets[tweetId] = self.time
        self.time += 1

    def getNewsFeed(self, userId: int) -> List[int]:
        min_heap = []
        users = [userId] + list(self.user_followers[userId])
        for user in users:
            for tweetId in self.user_tweets[user]:
                if len(min_heap) < 10:
                    heapq.heappush(min_heap,(self.tweets[tweetId],tweetId))
                elif self.tweets[tweetId] > min_heap[0][0]:
                    heapq.heapreplace(min_heap,(self.tweets[tweetId],tweetId))
        new_feeds = []
        while min_heap:
            new_feeds.append(heapq.heappop(min_heap)[1])
        new_feeds.reverse()
        return new_feeds;

    def follow(self, followerId: int, followeeId: int) -> None:
        self.user_followers[followerId].add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:
        self.user_followers[followerId].discard(followeeId)


# Your Twitter object will be instantiated and called as such:
# obj = Twitter()
# obj.postTweet(userId,tweetId)
# param_2 = obj.getNewsFeed(userId)
# obj.follow(followerId,followeeId)
# obj.unfollow(followerId,followeeId)
