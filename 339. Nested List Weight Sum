/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer,
 *     // rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds,
 *     // if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds,
 *     // if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    void dfs(int& sum, NestedInteger list, int depth){
        if(list.isInteger()){
            sum += list.getInteger() * depth;
            return;
        }
        for(auto l : list.getList()){
            dfs(sum, l, depth + 1);
        }
    }
    int depthSum(const vector<NestedInteger>& nestedList) {
        // Write your code here
        int sum = 0;
        for(int i = 0; i < nestedList.size(); i++){
            dfs(sum,nestedList[i],1);
        }
        return sum;
        
    }
};



/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer,
 *     // rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds,
 *     // if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds,
 *     // if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    void dfs(int& sum, const NestedInteger& list, int depth){
        if(list.isInteger()){
            sum += list.getInteger() * depth;
            return;
        }
        for(const auto& l : list.getList()){
            dfs(sum, l, depth + 1);
        }
    }
    int depthSum(const vector<NestedInteger>& nestedList) {
        // Write your code here
        int sum = 0;
        for(int i = 0; i < nestedList.size(); i++){
            dfs(sum,nestedList[i],1);
        }
        return sum;
        
    }
};


/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer,
 *     // rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds,
 *     // if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds,
 *     // if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    int dfs(const vector<NestedInteger>& nestedList, int depth){
        int sum = 0;
        for(const auto& l : nestedList){
            if(l.isInteger()){
                sum += l.getInteger() * depth;
            }else{
                sum += dfs(l.getList(), depth+1);
            }
        }
        return sum;
    }
    int depthSum(const vector<NestedInteger>& nestedList) {
        // Write your code here
        return dfs(nestedList, 1);
        
    }
};
