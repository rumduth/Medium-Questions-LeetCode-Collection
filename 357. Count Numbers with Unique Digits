class Solution:
    def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
       
        upper_bound = int(pow(10,n))
        visited = [False] * 10

        def backtrack(number):
            if number >= upper_bound:
                return 0
            res = 1
            for i in range(0,10):
                if visited[i]:
                    continue
                visited[i] = True
                res += backtrack(number * 10 + i)
                visited[i] = False
            return res
        
        res = 1
        for i in range(1,10):
            visited[i] = True
            res += backtrack(i)
            visited[i] = False
        return res



class Solution:
    def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        if n == 1:
            return 10
        dp = [1] * (n+1)
        dp[1] = 10
        dp[2] = 9 * 9
        for i in range(3,n+1):
            dp[i] = dp[i-1] * (11 - i)
        res = 0
        for i in range(1,n+1):
            res += dp[i]
        return res
