class Solution:
    def integerBreak(self, n: int) -> int:
        if n == 1:
            return 1
        if n == 2:
            return 1
        
        dp = [1] * (n + 1)
        for i in range(3,n+1):
            for j in range(1, i - 1):
                dp[i] = max(dp[i],dp[j] * dp[i - j], (i-j) * j, dp[i-j] * j)
        return dp[n]




class Solution:
    def integerBreak(self, n: int) -> int:
        if n == 1:
            return 1
        if n == 2:
            return 1
        if n == 3:
            return 2
        if n == 4:
            return 4
        if n % 3 == 0:
            return int(pow(3,n // 3))
        elif n % 3 == 1:
            return 4 * int(pow(3, (n - 4) // 3))
        else:
            return 2 * int(pow(3, (n - 2) // 3))

class Solution:
    def integerBreak(self, n: int) -> int:
        if n <= 3:
            return n - 1
        dp = [0] * (n+1)
        dp[1] = 1
        dp[2] = 2
        dp[3] = 3
        for i in range(4,n+1):
            dp[i] = max(2 * dp[i-2], 3 * dp[i-3])
        return dp[n]
