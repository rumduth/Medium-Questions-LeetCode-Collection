from typing import (
    List,
)

class Solution:
    """
    @param grid: Given a 2D grid, each cell is either 'W', 'E' or '0'
    @return: an integer, the maximum enemies you can kill using one bomb
    """
    def max_killed_enemies(self, grid: List[List[str]]) -> int:
        # write your code here
        m = len(grid)
        if m == 0:
            return 0
        n = len(grid[0])
        left = [[0] * n for _ in range(m)]
        right = [[0] * n for _ in range(m)]
        up = [[0] * n for _ in range(m)]
        bottom = [[0] * n for _ in range(m)]

        for i in range(m):
            enemy = 0
            for j in range(n):
                if grid[i][j] == 'W':
                    enemy = 0
                elif grid[i][j] == 'E':
                    enemy += 1
                else:
                    left[i][j] += enemy
            enemy = 0
            for j in range(n-1,-1,-1):
                if grid[i][j] == 'W':
                    enemy = 0
                elif grid[i][j] == 'E':
                    enemy += 1
                else:
                    right[i][j] += enemy
        for j in range(n):
            enemy = 0
            for i in range(m):
                if grid[i][j] == 'W':
                    enemy = 0
                elif grid[i][j] == 'E':
                    enemy += 1
                else:
                    up[i][j] += enemy
            enemy = 0
            for i in range(m-1,-1,-1):
                if grid[i][j] == 'W':
                    enemy = 0
                elif grid[i][j] == 'E':
                    enemy += 1
                else:
                    bottom[i][j] += enemy
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '0':
                    res = max(res, up[i][j] + bottom[i][j] + left[i][j] + right[i][j])
            
        return res

        

