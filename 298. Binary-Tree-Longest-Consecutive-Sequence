from lintcode import (
    TreeNode,
)

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of binary tree
    @return: the length of the longest consecutive sequence path
    """
    def longest_consecutive(self, root: TreeNode) -> int:
        # write your code here
        
        res = [0]

        def helper(root, parent, seq):
            if root is None:
                return
            if parent is None:
                res[0] = seq = 1
            else:
                if root.val == parent.val + 1:
                    seq += 1
                    res[0] = max(res[0],seq)   
                else:
                    seq = 1
            helper(root.left,root,seq)
            helper(root.right,root,seq)
        
        helper(root,None,0)
        return res[0]


from lintcode import (
    TreeNode,
)

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of binary tree
    @return: the length of the longest consecutive sequence path
    """
    def longest_consecutive(self, root: TreeNode) -> int:
        # write your code here
        res = [0]
        
        res = [0]

        def helper(root, parent, length):
            if not root:
                return
            if parent and parent.val + 1 == root.val:
                length += 1
            else:
                length = 1
            res[0] = max(res[0],length)
            helper(root.left,root,length)
            helper(root.right,root,length)
        helper(root,None,0)
        return res[0]
        



